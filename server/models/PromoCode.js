const mongoose = require('mongoose');

const promoCodeSchema = new mongoose.Schema({
  // Основная информация
  code: {
    type: String,
    required: true,
    unique: true,
    uppercase: true,
    trim: true,
    minlength: 3,
    maxlength: 20
  },
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  description: {
    type: String,
    trim: true,
    maxlength: 500
  },
  
  // Тип скидки
  discountType: {
    type: String,
    enum: ['percentage', 'fixed_amount', 'free_hour'],
    required: true
  },
  discountValue: {
    type: Number,
    required: true,
    min: 0
  },
  maxDiscountAmount: {
    type: Number, // Максимальная сумма скидки для процентных скидок
    min: 0
  },
  
  // Статус
  status: {
    type: String,
    enum: ['active', 'inactive', 'expired', 'used_up'],
    default: 'active'
  },
  
  // Даты действия
  validFrom: {
    type: Date,
    required: true
  },
  validUntil: {
    type: Date,
    required: true
  },
  
  // Ограничения использования
  usageLimit: {
    total: {
      type: Number,
      default: null // null = без ограничений
    },
    perUser: {
      type: Number,
      default: 1
    },
    perDay: {
      type: Number,
      default: null
    },
    perMonth: {
      type: Number,
      default: null
    }
  },
  
  // Условия применения
  conditions: {
    minBookingAmount: {
      type: Number,
      default: 0
    },
    maxBookingAmount: {
      type: Number,
      default: null
    },
    
    // Ограничения по времени
    timeRestrictions: {
      allowedHours: [{ type: String }], // ['09:00-12:00', '14:00-17:00']
      allowedDays: [{ 
        type: String,
        enum: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
      }],
      excludeWeekends: { type: Boolean, default: false },
      excludeHolidays: { type: Boolean, default: false }
    },
    
    // Ограничения по кортам
    courtRestrictions: {
      allowedCourts: [{ 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Court' 
      }],
      excludedCourts: [{ 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Court' 
      }],
      courtTypes: [{ 
        type: String,
        enum: ['padel', 'tennis', 'squash', 'badminton']
      }]
    },
    
    // Ограничения по пользователям
    userRestrictions: {
      allowedUsers: [{ 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User' 
      }],
      excludedUsers: [{ 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User' 
      }],
      loyaltyLevels: [{ 
        type: String,
        enum: ['bronze', 'silver', 'gold']
      }],
      newUsersOnly: { type: Boolean, default: false },
      corporateOnly: { type: Boolean, default: false }
    },
    
    // Ограничения по ценовым уровням
    pricingTiers: [{ 
      type: String,
      enum: ['peak', 'mid', 'off', 'social']
    }],
    
    // Комбинирование с другими скидками
    stackable: { type: Boolean, default: false },
    excludeSubscriptions: { type: Boolean, default: false },
    excludePasses: { type: Boolean, default: false }
  },
  
  // Статистика использования
  usage: {
    totalUsed: { type: Number, default: 0 },
    totalSavings: { type: Number, default: 0 },
    uniqueUsers: { type: Number, default: 0 },
    
    // Подробная статистика
    usageByUser: [{
      user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
      timesUsed: { type: Number, default: 0 },
      totalSavings: { type: Number, default: 0 },
      lastUsed: Date
    }],
    
    usageByDay: [{
      date: Date,
      count: Number,
      savings: Number
    }],
    
    lastUsed: Date
  },
  
  // Автоматическое создание
  autoGeneration: {
    isAutoGenerated: { type: Boolean, default: false },
    generatedFor: {
      type: String,
      enum: ['last_minute_booking', 'low_occupancy', 'user_birthday', 'loyalty_reward', 'referral']
    },
    baseBooking: { type: mongoose.Schema.Types.ObjectId, ref: 'Booking' },
    targetUser: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  },
  
  // Уведомления и маркетинг
  notifications: {
    sendReminder: { type: Boolean, default: false },
    reminderDaysBefore: { type: Number, default: 3 },
    reminderSent: { type: Boolean, default: false },
    
    // Email/SMS шаблоны
    emailTemplate: String,
    smsTemplate: String
  },
  
  // Создатель и управление
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  lastModifiedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  
  // Метаданные
  tags: [String], // для категоризации
  notes: String,
  
  // Интеграции
  externalCampaigns: [{
    platform: String,
    campaignId: String,
    trackingCode: String
  }]
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Индексы для производительности
promoCodeSchema.index({ code: 1 });
promoCodeSchema.index({ status: 1, validFrom: 1, validUntil: 1 });
promoCodeSchema.index({ 'conditions.userRestrictions.allowedUsers': 1 });
promoCodeSchema.index({ tags: 1 });

// Виртуальные поля
promoCodeSchema.virtual('isActive').get(function() {
  const now = new Date();
  return this.status === 'active' && 
         this.validFrom <= now && 
         this.validUntil >= now;
});

promoCodeSchema.virtual('isExpired').get(function() {
  return new Date() > this.validUntil;
});

promoCodeSchema.virtual('usagePercentage').get(function() {
  if (!this.usageLimit.total) return 0;
  return (this.usage.totalUsed / this.usageLimit.total) * 100;
});

promoCodeSchema.virtual('remainingUses').get(function() {
  if (!this.usageLimit.total) return null;
  return Math.max(0, this.usageLimit.total - this.usage.totalUsed);
});

// Pre-save middleware для обновления статуса
promoCodeSchema.pre('save', function(next) {
  const now = new Date();
  
  // Проверяем истечение срока
  if (this.validUntil < now && this.status === 'active') {
    this.status = 'expired';
  }
  
  // Проверяем исчерпание лимита использований
  if (this.usageLimit.total && 
      this.usage.totalUsed >= this.usageLimit.total && 
      this.status === 'active') {
    this.status = 'used_up';
  }
  
  next();
});

// Метод для проверки возможности использования
promoCodeSchema.methods.canUse = function(user, booking) {
  // Проверяем базовые условия
  if (!this.isActive) {
    return { 
      valid: false, 
      reason: `Promo code is ${this.status}` 
    };
  }
  
  // Проверяем лимиты
  if (this.usageLimit.total && this.usage.totalUsed >= this.usageLimit.total) {
    return { 
      valid: false, 
      reason: 'Promo code usage limit exceeded' 
    };
  }
  
  // Проверяем лимит на пользователя
  const userUsage = this.usage.usageByUser.find(u => u.user.toString() === user._id.toString());
  if (userUsage && userUsage.timesUsed >= this.usageLimit.perUser) {
    return { 
      valid: false, 
      reason: 'Personal usage limit exceeded' 
    };
  }
  
  // Проверяем минимальную сумму бронирования
  if (booking.pricing.totalAmount < this.conditions.minBookingAmount) {
    return { 
      valid: false, 
      reason: `Minimum booking amount is ${this.conditions.minBookingAmount}` 
    };
  }
  
  // Проверяем максимальную сумму бронирования
  if (this.conditions.maxBookingAmount && 
      booking.pricing.totalAmount > this.conditions.maxBookingAmount) {
    return { 
      valid: false, 
      reason: `Maximum booking amount is ${this.conditions.maxBookingAmount}` 
    };
  }
  
  // Проверяем ограничения по времени
  if (this.conditions.timeRestrictions.allowedHours.length > 0) {
    const bookingHour = booking.startTime.getHours();
    const timeString = `${bookingHour.toString().padStart(2, '0')}:00`;
    
    const isAllowedTime = this.conditions.timeRestrictions.allowedHours.some(range => {
      const [start, end] = range.split('-');
      return timeString >= start && timeString < end;
    });
    
    if (!isAllowedTime) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this time slot' 
      };
    }
  }
  
  // Проверяем дни недели
  if (this.conditions.timeRestrictions.allowedDays.length > 0) {
    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const bookingDay = dayNames[booking.startTime.getDay()];
    
    if (!this.conditions.timeRestrictions.allowedDays.includes(bookingDay)) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this day' 
      };
    }
  }
  
  // Проверяем исключения выходных
  if (this.conditions.timeRestrictions.excludeWeekends) {
    const day = booking.startTime.getDay();
    if (day === 0 || day === 6) {
      return { 
        valid: false, 
        reason: 'Promo code not valid on weekends' 
      };
    }
  }
  
  // Проверяем корты
  if (this.conditions.courtRestrictions.allowedCourts.length > 0) {
    const courtId = booking.court.toString();
    const isAllowedCourt = this.conditions.courtRestrictions.allowedCourts
      .some(id => id.toString() === courtId);
    
    if (!isAllowedCourt) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this court' 
      };
    }
  }
  
  // Проверяем исключенные корты
  if (this.conditions.courtRestrictions.excludedCourts.length > 0) {
    const courtId = booking.court.toString();
    const isExcludedCourt = this.conditions.courtRestrictions.excludedCourts
      .some(id => id.toString() === courtId);
    
    if (isExcludedCourt) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this court' 
      };
    }
  }
  
  // Проверяем пользователей
  if (this.conditions.userRestrictions.allowedUsers.length > 0) {
    const userId = user._id.toString();
    const isAllowedUser = this.conditions.userRestrictions.allowedUsers
      .some(id => id.toString() === userId);
    
    if (!isAllowedUser) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this user' 
      };
    }
  }
  
  // Проверяем уровень лояльности
  if (this.conditions.userRestrictions.loyaltyLevels.length > 0) {
    if (!this.conditions.userRestrictions.loyaltyLevels.includes(user.loyaltyLevel)) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for your loyalty level' 
      };
    }
  }
  
  // Проверяем только для новых пользователей
  if (this.conditions.userRestrictions.newUsersOnly && user.totalBookings > 0) {
    return { 
      valid: false, 
      reason: 'Promo code only for new users' 
    };
  }
  
  // Проверяем ценовые уровни
  if (this.conditions.pricingTiers.length > 0) {
    if (!this.conditions.pricingTiers.includes(booking.pricing.tier)) {
      return { 
        valid: false, 
        reason: 'Promo code not valid for this pricing tier' 
      };
    }
  }
  
  return { valid: true };
};

// Метод для расчета скидки
promoCodeSchema.methods.calculateDiscount = function(bookingAmount) {
  let discount = 0;
  
  switch (this.discountType) {
    case 'percentage':
      discount = bookingAmount * (this.discountValue / 100);
      if (this.maxDiscountAmount) {
        discount = Math.min(discount, this.maxDiscountAmount);
      }
      break;
      
    case 'fixed_amount':
      discount = Math.min(this.discountValue, bookingAmount);
      break;
      
    case 'free_hour':
      // Для бесплатного часа возвращаем полную стоимость
      discount = bookingAmount;
      break;
  }
  
  return Math.round(discount * 100) / 100;
};

// Метод для применения промокода
promoCodeSchema.methods.apply = async function(user, booking) {
  const validation = this.canUse(user, booking);
  if (!validation.valid) {
    throw new Error(validation.reason);
  }
  
  const discountAmount = this.calculateDiscount(booking.pricing.totalAmount);
  
  // Обновляем статистику
  this.usage.totalUsed += 1;
  this.usage.totalSavings += discountAmount;
  this.usage.lastUsed = new Date();
  
  // Обновляем статистику пользователя
  let userUsage = this.usage.usageByUser.find(u => u.user.toString() === user._id.toString());
  if (!userUsage) {
    userUsage = {
      user: user._id,
      timesUsed: 0,
      totalSavings: 0
    };
    this.usage.usageByUser.push(userUsage);
    this.usage.uniqueUsers += 1;
  }
  
  userUsage.timesUsed += 1;
  userUsage.totalSavings += discountAmount;
  userUsage.lastUsed = new Date();
  
  // Обновляем статистику по дням
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  let dayUsage = this.usage.usageByDay.find(d => d.date.getTime() === today.getTime());
  if (!dayUsage) {
    dayUsage = {
      date: today,
      count: 0,
      savings: 0
    };
    this.usage.usageByDay.push(dayUsage);
  }
  
  dayUsage.count += 1;
  dayUsage.savings += discountAmount;
  
  await this.save();
  
  return {
    discountAmount,
    discountType: this.discountType,
    code: this.code
  };
};

// Статический метод для автоматического создания промокодов
promoCodeSchema.statics.generateAutoPromo = async function(type, data) {
  const promoData = {
    autoGeneration: {
      isAutoGenerated: true,
      generatedFor: type
    },
    createdBy: data.createdBy,
    status: 'active'
  };
  
  switch (type) {
    case 'last_minute_booking':
      Object.assign(promoData, {
        code: `LASTMIN${Date.now().toString().slice(-6)}`,
        name: 'Last Minute Discount',
        description: 'Automatic discount for last-minute bookings',
        discountType: 'percentage',
        discountValue: 15,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 часа
        usageLimit: { total: 1, perUser: 1 },
        conditions: {
          minBookingAmount: 10
        }
      });
      break;
      
    case 'low_occupancy':
      Object.assign(promoData, {
        code: `FILLUP${Date.now().toString().slice(-6)}`,
        name: 'Low Occupancy Boost',
        description: 'Discount to increase court utilization',
        discountType: 'percentage',
        discountValue: 20,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 часа
        usageLimit: { total: 10, perUser: 1 },
        conditions: {
          pricingTiers: ['off', 'mid']
        }
      });
      break;
      
    case 'user_birthday':
      Object.assign(promoData, {
        code: `BIRTHDAY${data.userId.toString().slice(-6)}`,
        name: 'Birthday Special',
        description: 'Happy Birthday! Enjoy your special discount',
        discountType: 'percentage',
        discountValue: 25,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 дней
        usageLimit: { total: 1, perUser: 1 },
        conditions: {
          userRestrictions: {
            allowedUsers: [data.userId]
          }
        }
      });
      break;
  }
  
  return new this(promoData);
};

// Статический метод для поиска активных промокодов
promoCodeSchema.statics.findActive = function() {
  const now = new Date();
  return this.find({
    status: 'active',
    validFrom: { $lte: now },
    validUntil: { $gte: now }
  });
};

module.exports = mongoose.model('PromoCode', promoCodeSchema); 